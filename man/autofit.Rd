% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autofit.R
\name{autofit}
\alias{autofit}
\title{Autotuned surrogate}
\usage{
autofit(autotune_out, fx_vars, data, target, glm_par = alist())
}
\arguments{
\item{autotune_out}{A tidy data frame with the results from \code{\link{autotune}}.}

\item{fx_vars}{A list of data frames containing the feature effects. These
can be obtained by applying \code{\link{insights}} on your model fit.}

\item{data}{Data frame containing the original training data.}

\item{target}{A string specifying the target (or response) variable to model.}

\item{glm_par}{A named list, constructed via \code{\link{alist}}, containing
arguments to be passed on to \code{\link[stats]{glm}}. Examples are:
\code{family}, \code{weights} or \code{offset}. Note that \code{formula}
will be ignored as the GLM formula is determined by the specified
\code{target} and the automatic feature selection in the tuning process.}
}
\value{
The optimal GLM (i.e., a "glm" object), according to \code{\link{autotune}}.
}
\description{
Fit the optimal surrogate GLM based on the automated tuning results.
}
\examples{
\dontrun{
data('mtpl_be')
features <- setdiff(names(mtpl_be),c('id', 'nclaims', 'expo'))
set.seed(12345)
gbm_fit <- gbm::gbm(as.formula(paste('nclaims ~',
                               paste(features, sep = ' ', collapse = ' + '))),
                    distribution = 'poisson',
                    data = mtpl_be,
                    n.trees = 50,
                    interaction.depth = 3,
                    shrinkage = 0.1)
gbm_fun <- function(object, newdata) mean(predict(object, newdata, n.trees = object$n.trees, type = 'response'))
fx_vars <- gbm_fit \%>\% insights(vars = c('ageph', 'bm', 'coverage', 'fuel'),
                                data = mtpl_be,
                                interactions = 'auto',
                                hcut = 0.7,
                                pred_fun = gbm_fun)
fx_vars \%>\% autotune(data = mtpl_be,
                     target = 'nclaims',
                     lambdas = lambda_grid(., lambda_range = as.vector(outer(seq(1, 10, 1), 10^(-3:-1)))),
                     nfolds = 5,
                     strat_vars = c('nclaims', 'expo'),
                     glm_par = alist(family = poisson(link = 'log'),
                                     offset = log(expo)),
                     err_fun = poi_dev,
                     ncores = -1) \%>\%
             autofit(fx_vars = fx_vars,
                     data = mtpl_be,
                     target = 'nclaims',
                     glm_par = alist(family = poisson(link = 'log'),
                                     offset = log(expo)))

}
}
